{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/waffle/Desktop/turing/mod3/projects/rancid/src/components/Movies/Movies.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './Movies.css';\nimport Card from '../Cards/Cards';\n\nconst Movies = ({\n  movies,\n  selectMovie\n}) => {\n  const movieCards = movies.map(movie => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      id: movie.id,\n      poster: movie.poster_path,\n      title: movie.title,\n      selectMovie: selectMovie\n    }, movie.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"movies-container\",\n    children: movieCards\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Movies;\nexport default Movies; //we first call upon the component and the props being passed into it.\n\nMovies.propTypes = {\n  //then we access the prop/name we're passing in and assign that as the key with the value being an argument/check that the prop is the data type we're expecting or want\n  movies: PropTypes.arrayOf(PropTypes.object) //if the data type isn't what we expect or want, an error will be thrown that tells us ie: \"we expected a string, but got a number\"\n  //to test this, please change the value of movies to PropTypes.arrayOf(PropTypes.string) rather than object\n\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/Users/waffle/Desktop/turing/mod3/projects/rancid/src/components/Movies/Movies.js"],"names":["React","PropTypes","Card","Movies","movies","selectMovie","movieCards","map","movie","id","poster_path","title","propTypes","arrayOf","object"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,cAAP;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAD,KAA2B;AAExC,QAAMC,UAAU,GAAGF,MAAM,CAACG,GAAP,CAAWC,KAAK,IAAI;AACrC,wBACE,QAAC,IAAD;AAEE,MAAA,EAAE,EAAEA,KAAK,CAACC,EAFZ;AAGE,MAAA,MAAM,EAAED,KAAK,CAACE,WAHhB;AAIE,MAAA,KAAK,EAAEF,KAAK,CAACG,KAJf;AAKE,MAAA,WAAW,EAAEN;AALf,OACOG,KAAK,CAACC,EADb;AAAA;AAAA;AAAA;AAAA,YADF;AASD,GAVkB,CAAnB;AAYA,sBACE;AAAS,IAAA,SAAS,EAAC,kBAAnB;AAAA,cACGH;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAnBD;;KAAMH,M;AAqBN,eAAeA,MAAf,C,CAEA;;AACAA,MAAM,CAACS,SAAP,GAAmB;AACjB;AACAR,EAAAA,MAAM,EAAEH,SAAS,CAACY,OAAV,CAAkBZ,SAAS,CAACa,MAA5B,CAFS,CAGjB;AACA;;AAJiB,CAAnB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Movies.css'\nimport Card from '../Cards/Cards'\n\nconst Movies = ({movies, selectMovie}) => {\n\n  const movieCards = movies.map(movie => {\n    return (\n      <Card\n        key={movie.id}\n        id={movie.id}\n        poster={movie.poster_path}\n        title={movie.title}\n        selectMovie={selectMovie}\n      />\n    )\n  })\n\n  return (\n    <section className='movies-container'>\n      {movieCards}\n    </section>\n  )\n}\n\nexport default Movies;\n\n//we first call upon the component and the props being passed into it.\nMovies.propTypes = {\n  //then we access the prop/name we're passing in and assign that as the key with the value being an argument/check that the prop is the data type we're expecting or want\n  movies: PropTypes.arrayOf(PropTypes.object)\n  //if the data type isn't what we expect or want, an error will be thrown that tells us ie: \"we expected a string, but got a number\"\n  //to test this, please change the value of movies to PropTypes.arrayOf(PropTypes.string) rather than object\n  \n}\n"]},"metadata":{},"sourceType":"module"}